import threading
import time
import random

class Filosofo(threading.Thread):
    rodando = True

    def _init_(self, indice, garfo_esquerda, garfo_direita):
        threading.Thread._init_(self)
        self.indice = indice
        self.garfo_esquerda = garfo_esquerda
        self.garfo_direita = garfo_direita

    def run(self):
        while self.rodando:
            time.sleep(random.uniform(1, 3))
            print(f'Filósofo {self.indice} está com fome.')
            self.jantar_com_deadlock()

    def jantar_com_deadlock(self):
        garfo_esquerda, garfo_direita = self.garfo_esquerda, self.garfo_direita

        print(f'Filósofo {self.indice} tenta pegar garfo esquerdo.')
        garfo_esquerda.acquire()
        print(f'Filósofo {self.indice} pegou garfo esquerdo.')

        time.sleep(random.uniform(1, 3))  # Introduz um pequeno atraso para aumentar a probabilidade de deadlock

        print(f'Filósofo {self.indice} tenta pegar garfo direito.')
        garfo_direita.acquire()
        print(f'Filósofo {self.indice} pegou garfo direito e está comendo.')

        self.comer()

        garfo_direita.release()
        print(f'Filósofo {self.indice} liberou garfo direito.')
        garfo_esquerda.release()
        print(f'Filósofo {self.indice} liberou garfo esquerdo.')

    def comer(self):
        print(f'Filósofo {self.indice} está comendo.')
        time.sleep(random.uniform(1, 5))
        print(f'Filósofo {self.indice} terminou de comer e está pensando.')

def main():
    num_filosofos = 5
    garfos = [threading.Lock() for _ in range(num_filosofos)]
    filosofos = [Filosofo(i, garfos[i], garfos[(i+1) % num_filosofos]) for i in range(num_filosofos)]

    Filosofo.rodando = True
    for filosofo in filosofos:
        filosofo.start()

    time.sleep(30)  # Tempo suficiente para os filósofos tentarem adquirir garfos
    Filosofo.rodando = False
    print("Ocorreu um deadlock")
    print("Jantar dos filósofos acabou.")

if __name__ == "_main_":
    main()
    
